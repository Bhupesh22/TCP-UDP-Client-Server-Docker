Assignment Overview:
The aim of this project is to develop a server for a key-value store that operates on a single thread and supports basic operations like PUT, GET, and DELETE. 
It should be capable of communicating with clients using both TCP and UDP protocols. This project will showcase proficiency in socket programming, 
network communication, and error handling. Tasks involve building robust client and server applications, establishing a simple communication protocol, 
managing timeouts and handling malformed packets, and documenting communication activities.

Technical Impression:
Creating the single-threaded key-value store server and client programs offered valuable insights into network programming and protocol design. 
Implementing features to manage TCP and UDP communication, as well as mechanisms for error handling like timeouts and detecting malformed packets, 
deepened comprehension of network resilience and reliability. This experience underscored the significance of sound protocol design and error handling 
in distributed systems. The introduction to Docker broadened our understanding of containerization and microservices. We gained proficiency in 
constructing and executing Docker files and grasped the concept of inter-container communication and the necessity for Docker networks. 
Additionally, the necessity to handle exceptions stemming from malformed data in this project led to learning about checksums and various 
strategies for their computation.

Use Case:
A practical application scenario for this key-value store implementation could be within a distributed web 
application environment where multiple instances of application servers require access to shared configuration 
settings or session data. Deploying this key-value store enables each instance to efficiently access and modify shared data, 
ensuring consistency and scalability across the application infrastructure.

